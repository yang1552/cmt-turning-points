# -*- coding: utf-8 -*-
"""CMT10년 변곡점 확인.ipynb의 사본

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ol4-wLE58TJAZ_auDlXt0BsG73SLzDVw
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.nonparametric.smoothers_lowess import lowess
import ipywidgets as widgets
from IPython.display import display, clear_output

# 데이터 로딩 및 기본 전처리 (한 번만 실행)
url = "https://fred.stlouisfed.org/graph/fredgraph.csv?id=DGS10"
df = pd.read_csv(url, parse_dates=["observation_date"])
df = df.rename(columns={"observation_date": "Date", "DGS10": "Rate"})
df["Rate"] = pd.to_numeric(df["Rate"], errors="coerce")
df.dropna(inplace=True)
df = df[df["Date"] >= "2015-01-01"]
df.reset_index(drop=True, inplace=True)

def plot_peaks_troughs(frac=0.05, slope_threshold=0.005, window=30):
    clear_output(wait=True)

    # LOESS 스무딩
    smoothed = lowess(df['Rate'], df['Date'], frac=frac)
    smoothed_dates = pd.to_datetime(smoothed[:, 0])
    smoothed_values = smoothed[:, 1]

    # 기울기 계산
    slopes = np.diff(smoothed_values)
    slope_dates = smoothed_dates[1:]

    # 전환점 후보 선정
    candidate_idxs = np.where((np.abs(slopes) > 0) & (np.abs(slopes) < slope_threshold))[0]

    # Peak/Trough 판별
    peak_idxs = []
    trough_idxs = []
    for idx in candidate_idxs:
        start = max(0, idx - window)
        end = min(len(smoothed_values), idx + window + 1)
        local_range = smoothed_values[start:end]
        value = smoothed_values[idx]
        if value == np.max(local_range):
            peak_idxs.append(idx)
        elif value == np.min(local_range):
            trough_idxs.append(idx)

    # 그래프 출력
    fig, axs = plt.subplots(2, 1, figsize=(14, 10), sharex=True)

    # Peak 차트
    axs[0].plot(df['Date'], df['Rate'], label='Raw 10Y Rate', alpha=0.4)
    axs[0].plot(smoothed_dates, smoothed_values, label='LOESS Smoothed Curve', color='red')
    axs[0].scatter(slope_dates[peak_idxs], smoothed_values[1:][peak_idxs], color='blue', label='Peak (flat slope + local max)', zorder=5)
    axs[0].set_title("Peaks (flat slope + local max)")
    axs[0].set_ylabel("Rate (%)")
    axs[0].legend()
    axs[0].grid(True)

    # Trough 차트
    axs[1].plot(df['Date'], df['Rate'], label='Raw 10Y Rate', alpha=0.4)
    axs[1].plot(smoothed_dates, smoothed_values, label='LOESS Smoothed Curve', color='red')
    axs[1].scatter(slope_dates[trough_idxs], smoothed_values[1:][trough_idxs], color='green', label='Trough (flat slope + local min)', zorder=5)
    axs[1].set_title("Troughs (flat slope + local min)")
    axs[1].set_xlabel("Date")
    axs[1].set_ylabel("Rate (%)")
    axs[1].legend()
    axs[1].grid(True)

    plt.tight_layout()
    plt.show()

# 위젯 정의
frac_slider = widgets.FloatSlider(value=0.05, min=0.01, max=0.2, step=0.005, description='LOESS frac:')
threshold_slider = widgets.FloatSlider(value=0.005, min=0.0001, max=0.02, step=0.0005, description='Slope Threshold:')
window_slider = widgets.IntSlider(value=30, min=5, max=90, step=5, description='Window (days):')

# 파라미터 설명 텍스트
desc = widgets.HTML("""
<b>파라미터 설명:</b><br>
<ul>
<li><b>LOESS frac</b>: 스무딩 정도. 작을수록 원본에 가까움, 클수록 부드러움 증가</li>
<li><b>Slope Threshold</b>: 전환점 후보로 인정하는 최대 기울기 크기</li>
<li><b>Window (days)</b>: 전환점 전후 비교할 기간</li>
</ul>
""")

# 상호작용 설정
ui = widgets.VBox([desc, frac_slider, threshold_slider, window_slider])
out = widgets.interactive_output(plot_peaks_troughs, {
    'frac': frac_slider,
    'slope_threshold': threshold_slider,
    'window': window_slider
})

display(ui, out)